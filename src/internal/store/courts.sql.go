// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.20.0
// source: courts.sql

package store

import (
	"context"

	"github.com/google/uuid"
)

const getCourt = `-- name: GetCourt :one
SELECT id, uuid, court_number, alt_name, surface FROM court WHERE uuid = $1
`

func (q *Queries) GetCourt(ctx context.Context, argUuid uuid.UUID) (Court, error) {
	row := q.db.QueryRow(ctx, getCourt, argUuid)
	var i Court
	err := row.Scan(
		&i.ID,
		&i.Uuid,
		&i.CourtNumber,
		&i.AltName,
		&i.Surface,
	)
	return i, err
}

const getCourts = `-- name: GetCourts :many
SELECT id, uuid, court_number, alt_name, surface FROM court
`

func (q *Queries) GetCourts(ctx context.Context) ([]Court, error) {
	rows, err := q.db.Query(ctx, getCourts)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Court
	for rows.Next() {
		var i Court
		if err := rows.Scan(
			&i.ID,
			&i.Uuid,
			&i.CourtNumber,
			&i.AltName,
			&i.Surface,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
