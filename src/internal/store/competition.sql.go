// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.20.0
// source: competition.sql

package store

import (
	"context"

	"github.com/google/uuid"
)

const getCompetition = `-- name: GetCompetition :one
SELECT id, uuid, comp_type, name, identifier, is_internal, start_date, end_date FROM competition WHERE uuid = $1
`

func (q *Queries) GetCompetition(ctx context.Context, argUuid uuid.UUID) (Competition, error) {
	row := q.db.QueryRow(ctx, getCompetition, argUuid)
	var i Competition
	err := row.Scan(
		&i.ID,
		&i.Uuid,
		&i.CompType,
		&i.Name,
		&i.Identifier,
		&i.IsInternal,
		&i.StartDate,
		&i.EndDate,
	)
	return i, err
}

const getCompetitions = `-- name: GetCompetitions :many
SELECT id, uuid, comp_type, name, identifier, is_internal, start_date, end_date FROM competition
`

func (q *Queries) GetCompetitions(ctx context.Context) ([]Competition, error) {
	rows, err := q.db.Query(ctx, getCompetitions)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Competition
	for rows.Next() {
		var i Competition
		if err := rows.Scan(
			&i.ID,
			&i.Uuid,
			&i.CompType,
			&i.Name,
			&i.Identifier,
			&i.IsInternal,
			&i.StartDate,
			&i.EndDate,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
