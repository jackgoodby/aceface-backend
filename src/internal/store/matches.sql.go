// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.20.0
// source: matches.sql

package store

import (
	"context"

	"github.com/google/uuid"
)

const getMatch = `-- name: GetMatch :one
SELECT id, uuid, score FROM match WHERE uuid = $1
`

func (q *Queries) GetMatch(ctx context.Context, argUuid uuid.UUID) (Match, error) {
	row := q.db.QueryRow(ctx, getMatch, argUuid)
	var i Match
	err := row.Scan(&i.ID, &i.Uuid, &i.Score)
	return i, err
}

const getMatchScore = `-- name: GetMatchScore :one
SELECT uuid, score FROM match WHERE uuid = $1
`

type GetMatchScoreRow struct {
	Uuid  uuid.UUID
	Score []byte
}

func (q *Queries) GetMatchScore(ctx context.Context, argUuid uuid.UUID) (GetMatchScoreRow, error) {
	row := q.db.QueryRow(ctx, getMatchScore, argUuid)
	var i GetMatchScoreRow
	err := row.Scan(&i.Uuid, &i.Score)
	return i, err
}

const getMatches = `-- name: GetMatches :many
SELECT id, uuid, score FROM match
`

func (q *Queries) GetMatches(ctx context.Context) ([]Match, error) {
	rows, err := q.db.Query(ctx, getMatches)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Match
	for rows.Next() {
		var i Match
		if err := rows.Scan(&i.ID, &i.Uuid, &i.Score); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateMatchScore = `-- name: UpdateMatchScore :exec
UPDATE match SET score = $2 WHERE uuid = $1
`

type UpdateMatchScoreParams struct {
	Uuid  uuid.UUID
	Score []byte
}

func (q *Queries) UpdateMatchScore(ctx context.Context, arg UpdateMatchScoreParams) error {
	_, err := q.db.Exec(ctx, updateMatchScore, arg.Uuid, arg.Score)
	return err
}
